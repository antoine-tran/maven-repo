/**
 * 
 */
package edu.umd.cloud9.collection.wikipedia;

import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.MapFile;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;

import edu.umd.cloud9.io.map.HMapIIW;
import edu.umd.cloud9.io.map.HMapSIW;
import tuan.hadoop.conf.JobConfig;

/**
 * Invert the Anchor text map generated by Jimmy Lin's ExtractAnchorWikipediaAnchorText
 * 
 * Here outputs are keyed by anchor text
 * @author tuan
 *
 */
public class InverseAnchorTextMap extends Configured implements Tool {

	@Override

	// First argument is the input path
	// Second argument is the output path
	public int run(String[] args) throws Exception {
		String inpath = args[0];
		String outpath = args[0];

		final IntWritable mapKey = new IntWritable();
		final HMapSIW mapVal = new HMapSIW();

		Map<String, HMapIIW> tmpMap = new HashMap<>();
		
		final Text outKey = new Text();
		
		// cache anchor text inverted index into main-memory
		try (MapFile.Reader reader = new MapFile.Reader(new Path(inpath), getConf())) {

			while (reader.next(mapKey, mapVal)) {
				int entityId = mapKey.get();
				Set<String> anchors = mapVal.keySet();				
				for (String anchor : anchors) {
					if (!tmpMap.containsKey(anchor)) {
						tmpMap.put(anchor, new HMapIIW());
					} 
					tmpMap.get(anchor).put(entityId, mapVal.get(anchor));					
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			return -1;
		}
		
		
		try (MapFile.Writer writer = new MapFile.Writer(getConf(), new Path(outpath),
						MapFile.Writer.keyClass(Text.class),
						MapFile.Writer.valueClass(HMapIIW.class))) {
			for (Entry<String, HMapIIW> entry : tmpMap.entrySet()) {
				outKey.set(entry.getKey());
				HMapIIW outVal = entry.getValue();
				writer.append(outKey, outVal);
			}			
		} catch (Exception e) {
			e.printStackTrace();
			return -1;
		}
		
		return 0;
	}

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		try {
			ToolRunner.run(new InverseAnchorTextMap(), args);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

}
